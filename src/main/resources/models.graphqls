schema {
    query: Query,
    mutation: Mutation
}

type Query {
    user(id: Long!): User
    users(username: String): [User]
    userByUsername(username: String!): User
    group(id: Long): Group
    groups(title: String): [Group]
    groupByTitle(title: String!): Group
    message(id: Long!): Message
    messages(content: String, status: MessageStatus, timestamp: Long, senderId: Long, receiverId: Long, groupId: Long): [Message]
}

type Mutation {
    createUser(username: String!): User
    updateUser(id: Long, username: String!): User
    deleteUser(id: Long!): Long
    createGroup(title: String!): Group
    updateGroup(id: Long!, title: String!): Group
    deleteGroup(id: Long!): Long
    createMessage(content: String, status: MessageStatus, timestamp: Long, senderId: Long, receiverId: Long, groupId: Long): Message
    updateMessage(id: Long!, content: String, status: MessageStatus, timestamp: Long, senderId: Long, receiverId: Long, groupId: Long): Message
    deleteMessage(id: Long!): Long
}

type User {
    id: Long!
    username: String!
    groups: [Group]
    contacts: [User]
}

type Group {
    id: Long!
    title: String!
    groupUsers: [User]
}

enum MessageStatus {
    SENT,
    RECEIVED,
    READ
}

type Message {
    id: Long!
    content: String
    status: MessageStatus!
    timestamp: Long!
    sender: User!
    receiver: User
    group: Group
}